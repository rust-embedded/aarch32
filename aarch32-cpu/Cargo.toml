[package]
authors = [
    "Jonathan Pallant <jonathan.pallant@ferrous-systems.com>",
    "The Embedded Devices Working Group Arm Team <arm@teams.rust-embedded.org>",
]
categories = [
    "embedded",
    "no-std",
]
description = "CPU support for AArch32 Arm Processors"
edition = "2021"
keywords = [
    "arm",
    "cortex-a",
    "cortex-r",
    "embedded",
    "no-std",
]
license = "MIT OR Apache-2.0"
name = "aarch32-cpu"
readme = "README.md"
repository = "https://github.com/rust-embedded/aarch32.git"
homepage = "https://github.com/rust-embedded/aarch32"
rust-version = "1.83"
version = "0.1.0"

[dependencies]
arbitrary-int = "2"
bitbybit = "1.4"
num_enum = { version = "0.7", default-features = false }
critical-section = {version = "1.2.0", features = ["restore-state-u8"], optional = true}
thiserror = { version = "2", default-features = false }
defmt = { version = "1", optional = true }
serde = { version = "1", features = ["derive"], default-features = false, optional = true }

[build-dependencies]
arm-targets = { version = "0.3.0", path = "../arm-targets" }

[features]
# Adds a critical-section implementation that only disables interrupts.
# This is not sound on multi-core systems because interrupts are per-core.
critical-section-single-core = ["critical-section"]
# Adds a critical-section implementation that disables interrupts and does
# a CAS spinlock.
critical-section-multi-core = ["critical-section"]
# Adds defmt::Format implementation for the register types
defmt = ["dep:defmt", "arbitrary-int/defmt"]
serde = ["dep:serde", "arbitrary-int/serde"]
# Stops assembly routines being inlined, so they can be checked when this
# library is compiled (as opposed to when the function is used)
check-asm = []

[package.metadata.docs.rs]
targets = ["armv7r-none-eabihf", "armv7r-none-eabi", "armv7a-none-eabihf"]
